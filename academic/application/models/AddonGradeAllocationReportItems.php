<?php/**  * @Framework Zend Framework * @Powered By TIS  * @category   ERP Product * @copyright  Copyright (c) 2014-2015 Techintegrasolutions Pvt Ltd. * (http://www.techintegrasolutions.com) *	Authors Kannan and Rajkumar */class Application_Model_AddonGradeAllocationReportItems extends Zend_Db_Table_Abstract{    public $_name = 'addon_grade_allocation_report_items';    protected $_id = 'grade_allocation_report_item_id';      //get details by record for edit	public function getRecords($id)    {               $select=$this->_db->select()                      ->from($this->_name)                      ->where("$this->_name.grade_allocation_report_id=?", $id)				   					  ->where("$this->_name.status !=?", 2);        $result=$this->getAdapter()                      ->fetchAll($select);        //print_r($result);die;					          return $result;    }                    public function getMarksDetailsWithCourse($tabl_id,$stu_id,$term_id){            $select=$this->_db->select()                      ->from($this->_name)                      ->joinLeft(array('course'=> 'course_master'),"course.course_id = $this->_name.course_id",array('course_code'))                      ->joinleft(array("ct"=>"course_type_master"),"ct.ct_id=course.ct_id",array("ct_name"))                      ->where("$this->_name.tabl_id=?", $tabl_id)	                      ->where("$this->_name.student_id=?", $stu_id)                     ->order(array("ct.sort_order","ct.ct_id","ct.ct_name"));        //   echo $select ; die;        $result=$this->getAdapter()                      ->fetchAll($select);           return $result;    }		public function trashItems($grade_allocation_report_id) {        $this->_db->delete($this->_name, "grade_allocation_report_id=$grade_allocation_report_id");    }        public function getPublishedStudent($acad_year, $addon_id, $tabl_id) {        $select=$this->_db->select()                      ->from($this->_name,array("student_id"))                      ->joinInner("addon_grade_allocation_report","addon_grade_allocation_report.grade_report_id=$this->_name.report_id")                      ->where("addon_grade_allocation_report.academic_year=?", $acad_year)                      ->where("$this->_name.addon_course_list=?", $addon_id)                      ->where("$this->_name.tabl_id=?", $tabl_id)                        ->where("addon_grade_allocation_report.flag =?", 'R')		->where("addon_grade_allocation_report.status !=?", 2)		->group('student_id');        $result=$this->getAdapter()                      ->fetchAll($select);  		         return $result;    }        /**     * Check if grade of a subject is published by dean     * @return Boolean Returns TRUE if grade finally published else returns FALSE     */    public function isGradeReportPublished($batch_id, $course_id) {        $select=$this->_db->select()                      ->from($this->_name)                      ->joinInner("addon_grade_allocation_report","addon_grade_allocation_report.grade_report_id=$this->_name.report_id")                      ->where("addon_grade_allocation_report.academic_year=?", $batch_id)                  //    ->where("$this->_name.term_id=?", $term_id)                      ->where("$this->_name.course_id=?", $course_id)		->where("addon_grade_allocation_report.status !=?", 2);        $result=$this->getAdapter()                      ->fetchRow($select);  		          if(is_array($result) && !empty($result)){            return true;        }        else{            return false;        }    }	public function saveRows($array) {        $vAmount    = count($array);        $values     = array();        $columns    = array();    if($vAmount>0){        foreach ($array as $colval) {            foreach ($colval as $column=>$value) {                array_push($values,$value);                !in_array($column,$columns) ? array_push($columns,$column) : null;            }        }        $cAmount    = count($columns);        $values     = array_chunk($values, $cAmount);        $iValues    = '';        $iColumns   = implode("`, `", $columns);        for($i=0; $i<$vAmount;$i++)            $iValues.="('".implode("', '", $values[$i])."')".(($i+1)!=$vAmount ? ',' : null);        $data="INSERT INTO `".$this->_name."` (`".$iColumns."`) VALUES ".$iValues;        $this->getAdapter()->query($data);    }}			}?>