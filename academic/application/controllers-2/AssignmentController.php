<?phpclass AssignmentController extends Zend_Controller_Action {    private $_siteurl = null;    private $_db = null;    private $_authontication = null;    private $_agentsdata = null;    private $_usersdata = null;    private $_act = null;    private $_adminsettings = null;    private $_flashMessenger = null;    private $login_storage = NULL;    private $roleConfig = NULL;    private $accessConfig = NULL;    public function init() {        $zendConfig = new Zend_Config_Ini(            APPLICATION_PATH . '/configs/application.ini', APPLICATION_ENV);        require_once APPLICATION_PATH . '/configs/access_level.inc';        $this->accessConfig = new accessLevel();        $config = $zendConfig->mainconfig->toArray();        $this->view->mainconfig = $config;        $this->_action = $this->getRequest()->getActionName();        $this->roleConfig = $config_role = $zendConfig->role_administrator->toArray();        $this->view->administrator_role = $config_role;        $storage = new Zend_Session_Namespace("admin_login");        $this->login_storage = $data = $storage->admin_login;        $this->view->login_storage = $data;        //print_r($data);exit;        if (isset($data)) {            $this->view->role_id = $data->role_id;            $this->view->login_empl_id = $data->empl_id;        }        if ($this->_action == "login" || $this->_action == "forgot-password") {            $this->_helper->layout->setLayout("adminlogin");        } else {            $this->_helper->layout->setLayout("layout");        }        $this->_flashMessenger = $this->_helper->FlashMessenger;        $this->authonticate();        $this->_act = new Application_Model_Adminactions();        $this->_db = Zend_Db_Table::getDefaultAdapter();    }    protected function authonticate() {        $storage = new Zend_Session_Namespace("admin_login");        $data = $storage->admin_login;        if ($data->role_id == 0)            $this->_redirect('student-portal/assignments');        if (!$data && $this->_action != 'login' &&            $this->_action != 'forgot-password') {            $this->_redirect('index/login');            return;        }        if ($this->_action != 'forgot-password') {            $this->_authontication = $data;            $this->_agentsdata = $storage->agents_data;        }    }    public function indexAction() {        $this->view->action_name = 'notificationpush';        $this->view->sub_title_name = 'notificationpush';        $this->accessConfig->setAccess('SA_ACAD_NOTIFICATION');        $EvaluationComponents_model = new Application_Model_EvaluationComponents();        $EvaluationComponentsItems_model = new Application_Model_EvaluationComponentsItems();        $assignment_model = new Application_Model_Assignment();        $assignment_form = new Application_Form_Assignment();        $student_assignment_model = new Application_Model_SubmitAssignment();        $ec_id = $this->_getParam("id");        $aca = $this->_getParam('aca');        $ter = $this->_getParam('ter');        $type = $this->_getParam("type");        $this->view->type = $type;        $this->view->form = $assignment_form;        switch ($type) {            case "add":                if ($this->getRequest()->isPost()) {                    $data = $_POST;                    $data['updated_by'] = $_SESSION['admin_login']['admin_login']->id;                    $data['updated_date'] = date('d-m-Y h:i:s A');                    if ($this->login_storage->empl_id)                        $data['empl_id'] = $this->login_storage->empl_id;                    else                        $data['empl_id'] = 1;                    //echo '<pre>'; print_r($_POST); exit;                    $assignmentData = array(                        'session' => $data['session'],                        'cmn_terms' => $data['cmn_terms'],                        'section' => $data['section'],                        'cc_id' => $data['cc_id'],                        'department' => !empty($data['department']) ? $data['department'] : '0',                        'course_id' => !empty($data['course_id']) ? $data['course_id'] : '0',                        'document_type' => $data['document_type'],                        'document_title' => $data['document_title'],                        'remarks' => $data['remarks'],                        'status' => $data['status'],                        'due_date' => $data['due_date'],                        'empl_id' => $data['empl_id'],                        'updated_date' => $data['updated_date']                    );                    $last_insert_id = $assignment_model->insert($assignmentData);                    //$student_assignment_model->insert($data_student);                    $student_info = $_POST['selected_students'];                    foreach ($student_info as $key => $value) {                        //echo '<pre>'; print_r($value); exit;                        $student_data['student_id'] = $value;                        $student_data['assignment_id'] = $last_insert_id;                        $student_data['session'] = $data['session'];                        $student_data['section'] = $data['section'];                        $student_data['cmn_terms'] = $data['cmn_terms'];                        $student_data['cc_id'] = $data['cc_id'];                        $student_data['department'] = !empty($data['department']) ? $data['department'] : '0';                        $student_data['course_id'] = !empty($data['course_id']) ? $data['course_id'] : '0';                        $student_assignment_model->insert($student_data);                    }                    $dirPath = APPLICATION_PATH . '/../public/Assignments/' . '/' . $last_insert_id . '/assignment_details/';                    //print_r($dirPath);exit;	                    if (!file_exists($dirPath)) {                        mkdir($dirPath, 755, true);                    }                    $file_name = $_FILES["file"]["name"];                    $tem_name = $_FILES["file"]["tmp_name"];                    $imageFileType = strtolower(pathinfo($file_name[0], PATHINFO_EXTENSION));                    if ($imageFileType == "jpg" || $imageFileType == "png" || $imageFileType == "jpeg" || $imageFileType == "pdf" || $imageFileType == "doc" || $imageFileType == "docx" || $imageFileType == "ppt" || $imageFileType == "xls" || $imageFileType == "xlsx") {                        if (move_uploaded_file($tem_name[0], $dirPath . $file_name[0])) {                            //echo "File is valid, and was successfully uploaded";                         } else {                            // echo "Upload failed";                          }                        $file_data['filename'] = "public/Assignments/" . $last_insert_id . "/assignment_details/" . $file_name[0];                        $assignment_model->update($file_data, array('assignment_id=?' => $last_insert_id));                    }                    $this->_flashMessenger->addMessage('Assignment added sucessfully.');                    $this->_redirect('assignment/index');                }                // }                break;            case 'edit':                $result = $assignment_model->getRecord($ec_id);                //echo '<pre>'; print_r($result);exit;                $assignment_form->populate($result);                $this->view->result = $result;                if ($this->getRequest()->isPost()) {                        $data = $_POST;                        $data['updated_by'] = $_SESSION['admin_login']['admin_login']->id;                        $data['updated_date'] = date('d-m-Y h:i:s A');                        //echo "<pre>";print_r($data);exit;                        $dirPath = APPLICATION_PATH . '/../public/Assignments/' . '/' . $ec_id . '/assignment_details/';                        if (!file_exists($dirPath)) {                            mkdir($dirPath, 755, true);                        }                        $file_name = $_FILES["file"]["name"];                        $tem_name = $_FILES["file"]["tmp_name"];                        $imageFileType = strtolower(pathinfo($file_name[0], PATHINFO_EXTENSION));                        if ($imageFileType == "jpg" || $imageFileType == "png" || $imageFileType == "jpeg" || $imageFileType == "pdf" || $imageFileType == "doc" || $imageFileType == "docx" || $imageFileType == "ppt" || $imageFileType == "xls" || $imageFileType == "xlsx") {                            if (move_uploaded_file($tem_name[0], $dirPath . $file_name[0])) {                                //echo "File is valid, and was successfully uploaded";                             } else {                                // echo "Upload failed";                              }                            if (!empty($file_name[0])) {                                $data['filename'] = "public/Assignments/" . $ec_id . "/assignment_details/" . $file_name[0];                            } else {                                $data['filename'] = $result['filename'];                            }                        }                        $assignment_model->update($data, array('assignment_id=?' => $ec_id));                                        $this->_flashMessenger->addMessage('Assignment Sharing Successfully updated !');                    $this->_redirect('assignment/index');                }                break;            case 'delete':                $data['status'] = 2;                if ($ec_id) {                    $EvaluationComponents_model->update($data, array('ec_id=?' => $ec_id));                    $EvaluationComponentsItems_model->update($data, array('eci_id=?' => $eci_id));                    $this->_flashMessenger->addMessage('Evaluation Component Deleted Successfully');                    $this->_redirect('assignment/index');                }                break;            default:                $messages = $this->_flashMessenger->getMessages();                $this->view->messages = $messages;                $result = $assignment_model->getRecords();                //echo '<pre>';print_r($result);exit;                $i = 0;                foreach ($result as $key) {                    $file_arr = explode('/', $key['filename']);                    $file_name = explode(".", $file_arr[count($file_arr) - 1]);                    $result[$i]['filename1'] = $file_name[0];                    $i++;                }                $page = $this->_getParam('page', 1);                $paginator_data = array(                    'page' => $page,                    'result' => $result                );                $this->view->paginator = $this->_act->pagination($paginator_data);                break;        }    }    public function GetCourse($term_id, $batch_id) {        $course_details = new Application_Model_Attendance();        $result = $course_details->getCourseDetails($term_id, $batch_id);        $body[""] = 'Select';        foreach ($result as $value) {            $body[$value['course_id']] = $value['course_code'];        }        return $body;    }    public function ajaxEvaluationComponentsViewAction() {        $this->_helper->layout->disableLayout();        if ($this->_request->isPost() && $this->getRequest()->isXmlHttpRequest()) {            $evaluation_id = $this->_getParam("evaluation_id");            $EvaluationComponents_model = new Application_Model_EvaluationComponents();            $result = $EvaluationComponents_model->getComponentsView($evaluation_id);            $this->view->result = $result;        }    }    public function ajaxGetStudentsDetailsAction() {        $term_model = new Application_Model_TermMaster();        $course_learning = new Application_Model_ElectiveSelection();        $core_course_learning = new Application_Model_Corecourselearning();        $daily_attendance = new Application_Model_DailyAttendanceModel();        $academic_model = new Application_Model_Academic();        $this->_helper->layout->disableLayout();        if ($this->_request->isPost() && $this->getRequest()->isXmlHttpRequest()) {            $ct_id = $this->_getParam("ct_id");            $employee_id = $this->_getParam("employee_id");            $section = $this->_getParam("section");            $department_id = $this->_getParam("department_id");            $course_id = $this->_getParam("course_id");            $term_id = $this->_getParam("term_id");            $grade_allocate_id = $this->_getParam("grade_allocate_id");            $honors_id = $this->_getParam("honors_id");            $session_id = $this->_getParam("session_id");            $degree_id = $this->_getParam("degree_id");            $ge_id = $this->_getParam("ge_id");            $id = $this->_getParam("id");            $tabId = $this->_getParam("tabId");            //echo '<pre>'; print_r($tabId);exit;            $componentmaster = new Application_Model_Component();            //====Ashutosh==//            $componentmaster = new Application_Model_Component();            //====[end]====//            $this->view->weightage = $componentmaster->getActiveRecords();            if (!empty($honors_id)) {                $acadId = $academic_model->getAcademicId($honors_id, $session_id);                $acadId = $acadId['academic_year_id'];            }            if (!empty($course_id)) {                $data = $term_model->getRecordByCmnTerms($term_id, $session_id, $ge_id, $course_id);                $acadId = $data[0]['academic_year_id'];            }            //echo '<pre>';print_r($acadId);exit;            $termId = $term_model->getTermRecordsbycmn1($acadId, $term_id);            if (!empty($id)) {                $res_batch_attendance = $daily_attendance->getRecordById($id);                $Category_data['id'] = $res_batch_attendance;                $Category_data['short_code'] = $res_batch_attendance['batch'];                $this->view->category_data = $Category_data['id'];                //echo "<pre>";print_r($Category_data);                //exit;                } else {                $res_batch_attendance['u_id'] = '';                //$res_batch_attendance['attended_class'] = '';                 $yearArr = $term_model->getRecordByCmnTerms($term_id, $session_id);                // echo '<pre>';                $yearidarr = $this->mergData($yearArr, array('year_id'), count($yearArr));                $termidarr = $this->mergData($yearArr, array('term_id'), count($yearArr));                $academic_id_Arr = $this->mergData($yearArr, array('academic_year_id'), count($yearArr));                $GradeAllocation_model = new Application_Model_GradeAllocation();                $EvaluationComponentsItems_model = new Application_Model_EvaluationComponentsItems();                if (!empty($session_id)) {                    $academic_res_on_dept = $academic_model->getAcademicOnDept($honors_id, $session_id, $degree_id);                    $academic_res_on_dept = $this->mergData($academic_res_on_dept, array('academic_year_id'), count($academic_res_on_dept));                    foreach ($academic_id_Arr as $key => $value) {                        if (!in_array($value, $academic_res_on_dept)) {                            unset($academic_id_Arr[$key]);                        }                    }                }                $StudentPortal_model = new Application_Model_StudentPortal();                $this->view->course_id = $course_id;                $filter_acad = array();                foreach ($academic_id_Arr as $key => $value) {                    if ($value) {                        if ($degree_id != 1) {                            //echo '<pre>';print_r($termId);exit;                            $newData[$value] = $StudentPortal_model->getstudentsdetailattend($value, $term_id, $tabId, $termId['term_id'], $section);                            if ($course_id) {                                $raw_data[$value] = $course_learning->getStudentsForElectiveByCourse($academic_id_Arr[$key], $course_id, $termidarr[$key], 'electives', "", "", false, false, $tabId);                                if (count($newData[$value]) > 0) {                                    $newData[$value] = $this->selectData($raw_data[$value], array('students', 'student_id', 'stu_id', 'father_name', 'reg_no', 'exam_roll', 'short_code', 'roll_no', 'stu_status'), count($raw_data[$value]));                                }                            }                            if (!in_array($newVal['academic_id'], $filter_acad)) {                                $filter_acad[] = $value;                                foreach ($newData[$value] as $Studkey => $newVal) {                                    $newVal['term_id'] = $termidarr[$key];                                    $newVal['academic_id'] = $academic_id_Arr[$key];                                    $newVal['attended_class'] = $res_batch_attendance['attended_class'];                                    if ($newVal['stu_id'] == $res_batch_attendance['u_id'] && !empty($id))                                        $Category_data[] = $newVal;                                    //echo '<pre>'; print_r($Category_data);exit;                                    else if (empty($id))                                        $Category_data[] = $newVal;                                }                            }                        }                        else if (!$ct_id) {                            $newData[$value] = $StudentPortal_model->getstudentsdetailattend($value, $term_id, $tabId, $termId['term_id'], $section);                            if (!in_array($newVal['academic_id'], $filter_acad)) {                                $filter_acad[] = $value;                                foreach ($newData[$value] as $Studkey => $newVal) {                                    $newVal['term_id'] = $termidarr[$key];                                    $newVal['academic_id'] = $academic_id_Arr[$key];                                    $newVal['attended_class'] = $res_batch_attendance['attended_class'];                                    if ($newVal['stu_id'] == $res_batch_attendance['u_id'] && !empty($id))                                        $Category_data[] = $newVal;                                    else if (empty($id))                                        $Category_data[] = $newVal;                                }                            }                        }else {                            //echo '<pre>'; print_r($tabId);exit;                            $raw_data[$value] = $course_learning->getStudentsForElectiveByCourseAttend($academic_id_Arr[$key], $course_id, $termidarr[$key], 'electives', "", "", false, false, $tabId, $termId['term_id'], $section);                            //echo '<pre>'; print_r($raw_data);exit;                            $newData[$value] = $this->selectData($raw_data[$value], array('students', 'student_id', 'stu_id', 'father_name', 'reg_no', 'exam_roll', 'short_code', 'roll_no'), count($raw_data[$value]));                            foreach ($newData[$value] as $Studkey => $newVal) {                                $newVal['term_id'] = $termidarr[$key];                                $newVal['academic_id'] = $academic_id_Arr[$key];                                $newVal['attended_class'] = $res_batch_attendance['attended_class'];                                if ($newVal['stu_id'] == $res_batch_attendance['u_id'] && !empty($id))                                    $Category_data[] = $newVal;                                else if (empty($id))                                    $Category_data[] = $newVal;                            }                        }                    }                }                //echo '<pre>'; print_r($Category_data);exit;                echo '<option value="">Select</option>';                foreach ($Category_data as $k => $val) {                    echo '<option value="' . $val['student_id'] . '">' . $val['students'] . '</option>';                }            }        }die;    }}