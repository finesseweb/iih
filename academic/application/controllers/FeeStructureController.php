<?phpclass FeeStructureController extends Zend_Controller_Action {    private $_siteurl = null;    private $_db = null;    private $_flashMessenger = null;    private $_authontication = null;    private $_agentsdata = null;    private $_usersdata = null;    private $_act = null;    private $_adminsettings = null;    Private $_unit_id = null;    private $accessConfig =NULL;    public function init() {        $zendConfig = new Zend_Config_Ini(                APPLICATION_PATH . '/configs/application.ini', APPLICATION_ENV);                require_once APPLICATION_PATH . '/configs/access_level.inc';                                $this->accessConfig = new accessLevel();        $config = $zendConfig->mainconfig->toArray();        $this->view->mainconfig = $config;        $this->_action = $this->getRequest()->getActionName();        //access role id        $this->roleConfig = $config_role = $zendConfig->role_administrator->toArray();        $this->view->administrator_role = $config_role;        $storage = new Zend_Session_Namespace("admin_login");        $this->login_storage = $data = $storage->admin_login;        $this->view->login_storage = $data;        //print_r($data);exit;        if (isset($data)) {            $this->view->role_id = $data->role_id;            $this->view->login_empl_id = $data->empl_id;        }        if ($this->_action == "login" || $this->_action == "forgot-password") {            $this->_helper->layout->setLayout("adminlogin");        } else {            $this->_helper->layout->setLayout("layout");        }        $this->_act = new Application_Model_Adminactions();        $this->_db = Zend_Db_Table::getDefaultAdapter();        $this->_flashMessenger = $this->_helper->FlashMessenger;        $this->authonticate();    }    protected function authonticate() {        $storage = new Zend_Session_Namespace("admin_login");        $data = $storage->admin_login;          if($data->role_id == 0)            $this->_redirect('student-portal/fee-status');        if (!$data && $this->_action != 'login' &&                $this->_action != 'forgot-password') {            $this->_redirect('index/login');            return;        }        if ($this->_action != 'forgot-password') {            $this->_authontication = $data;            $this->_agentsdata = $storage->agents_data;        }    }    public function indexAction() {        $this->view->action_name = 'Fees';        $this->view->sub_title_name = 'Fee Structure';        $this->accessConfig->setAccess("SA_ACAD_FEE_HEADS");        $FeeStructure_model = new Application_Model_FeeStructure();        $FeeStructure_form = new Application_Form_FeeStructure();                 $Academic_model = new Application_Model_Academic();        $FeeStructureItems_model = new Application_Model_FeeStructureItems();        $FeeStructureTermItems_model = new Application_Model_FeeStructureTermItems();               $dept_details = new Application_Model_Department();        $structure_id = $this->_getParam("id");        //print_r($feehead_id);die;        $type = $this->_getParam("type");        $this->view->type = $type; $this->view->form = $FeeStructure_form;        if (empty($_SESSION['token'])) {            $_SESSION['token'] = bin2hex(random_bytes(32));        }        $token = $_SESSION['token'];        switch ($type) {            case "add":                if ($this->getRequest()->isPost()) {                    if ($FeeStructure_form->isValid($this->getRequest()->getPost())) {                        $data = $FeeStructure_form->getValues();                    	//echo "<pre>"; print_r($data); die;                      $insertData=array(                        'academic_id'=> $data['academic_id']                                           );                       if(!empty($data['csrftoken'])) {                               if($data['csrftoken']===$token ){                                              $last_insert_id = $FeeStructure_model->insert($insertData);                        $terms_fee = $this->getRequest()->getPost('terms_fee'); //Get AddMore Fields From View                        $terms_id = $this->getRequest()->getPost('term_id');												$termss_id = $this->getRequest()->getPost('terms_id');												                      $academic_id  = $FeeStructureTermItems_model->getAcademicId($last_insert_id);                      $degree_id = $Academic_model->getAcademicDegree($academic_id['academic_id']);                      $acad_details =  $Academic_model->getRecord($academic_id['academic_id']);                      $department = $acad_details['department'];            $session = $acad_details['session'];            $department = !empty($department)?$department:$this->_refresh(3,'/academic/fee-structure/index/type/add','Department Error...!');            $dept_type_id = $dept_details->getRecord($department)['department_type'];            $dept_type_id = !empty($dept_type_id)?$dept_type_id:$this->_refresh(3,'/academic/fee-structure/index/type/add','Department Type Error...!');            $data['department'] = $department;            // print_r($data); exit;            unset($data['csrftoken']);          $FeeStructure_model->update($data,array('structure_id=?'=>$last_insert_id));                        foreach ($terms_fee['grand_result1'] as $key => $grand_result1) {                            //$counts = $terms_fee['count'];                            //$count_i = $terms_fee['count_i'];                            $fee_data = array("structure_id" => $last_insert_id,                                                        "total_grand_value" => $terms_fee['grandtotal_total'][$key],                            );                            for($i=0;$i<count($terms_id); $i++)                            {                                $date = "t".($i+1)."_date";                                $grand_terms =  "grand_term".($i+1)."_result";                                $grand_results = "grand_result".($i+1);                               $fee_data[$date] = $terms_fee[$date];                               $fee_data [$grand_terms] = $terms_fee[$grand_results][$key];                            }                                       $FeeStructureItems_model->insert($fee_data);                        }                        $terms = $this->getRequest()->getPost('terms');                        $termss_id = $this->getRequest()->getPost('terms_id');                        //echo'<pre>';print_r($terms);die;                        $FeeCategory_model = new Application_Model_FeeCategory();                                                $Category_data = $FeeCategory_model->getCategory($degree_id,$session,$dept_type_id);                        $FeeHeads_model = new Application_Model_FeeHeads();                        for ($i = 0; $i < count($Category_data); $i++) {                            $terms_data['structure_id'] = $last_insert_id;                            $terms_data['category_id'] = $terms['category_id'][$i];                            $fee_heads = $FeeHeads_model->getFeehead_ids($Category_data[$i]['category_id']);                            for ($j = 0; $j < count($fee_heads); $j++) {                                //echo'<pre>';print_r($fee_heads[$j]['feehead_id']);die;                                //echo'<pre>';print_r($terms_data);die;                                for ($k = 1; $k <= count($terms_id); $k++) {                                    $terms_data['terms_id'] = $terms_id[$k-1];                                    $terms_data['terms'] = $k;																		$terms_data['term_id'] = $termss_id[$k-1];                                    $terms_data['fee_heads_id'] = $fee_heads[$j]['feehead_id'];                                    $terms_data['feeheads_total'] = empty($terms['feeheads_total_val' . $terms['category_id'][$i] . ''][$j])?0:$terms['feeheads_total_val' . $terms['category_id'][$i] . ''][$j];                                    $terms_data['fees'] = empty($_POST['term_' . $Category_data[$i]['category_id'] . '_' . $fee_heads[$j]['feehead_id'] . '_' . $k . ''])?0:$_POST['term_' . $Category_data[$i]['category_id'] . '_' . $fee_heads[$j]['feehead_id'] . '_' . $k . ''];                                    $terms_data['cat_row_total'] = empty($terms['cat_row_total' . $terms['category_id'][$i] . '_' . $i . ''])?0:$terms['cat_row_total' . $terms['category_id'][$i] . '_' . $i . ''];                                    //echo'<pre>';print_r($terms_data);die;                                                                        $FeeStructureTermItems_model->insert($terms_data);unset($_SESSION["token"]);                                }                            }                        }                          $_SESSION['message_class'] = 'alert-success';                        $this->_flashMessenger->addMessage('Fee Structure Successfully added');                        $this->_redirect('fee-structure/index');                                                 }  else {                                                       $message="Invalid Token";                                                       $_SESSION['message_class'] = 'alert-danger';                                                       $this->_flashMessenger->addMessage($message);                                                      $this->_redirect('fee-structure/index');                                                  }                                                      }	                    }                }                break;            case 'edit':                                                  $dept_model = new Application_Model_Academic();	  		$data = $dept_model->getDropDownList();						$FeeStructure_form->getElement('academic_id');		$academic_id = $FeeStructure_form->createElement('select','academic_id')							->removeDecorator('label')							->setAttrib('class',array('form-control','chosen-select'))						   ->setAttrib('required','required')							->removeDecorator("htmlTag")							->addMultiOptions(array('' => 'Select'))							->addMultiOptions($data);        $FeeStructure_form->addElement($academic_id);		                 $result = $FeeStructure_model->getRecord($structure_id);								                 $item_result = $FeeStructureItems_model->getItemRecords($structure_id);                            $this->view->students_name = $structure_id;                $this->view->item_result = $item_result;            //  $result['academic_id'] = $result['department'];               $academic_id = $result['academic_id'];                $FeeStructure_form->populate($result);                $this->view->result = $result;              if ($this->getRequest()->isPost()) {                    if ($FeeStructure_form->isValid($this->getRequest()->getPost())) {                                                $data = $FeeStructure_form->getValues();                       // echo "<pre>"; print_r($_POST); die;                           $insertData=array(                        'academic_id'=> $data['academic_id']                                           );                            if(!empty($data['csrftoken'])) {                               if($data['csrftoken']===$token ){                      $FeeStructure_model->delete(array('academic_id =?' =>  $academic_id));                                                                          $acad_details =  $Academic_model->getRecord($academic_id);                             $department = $acad_details['department'];            $session = $acad_details['session'];            $department = !empty($department)?$department:$this->_refresh(3,'/academic/fee-structure/index/type/add','Department Error...!');                        $dept_type_id = $dept_details->getRecord($department)['department_type'];            $dept_type_id = !empty($dept_type_id)?$dept_type_id:$this->_refresh(3,'/academic/fee-structure/index/type/add','Department Type Error...!');                    $data['department'] =   $department;                      $last_insert_id = $FeeStructure_model->insert($insertData);                                                 $degree_id = $Academic_model->getAcademicDegree($academic_id);                        $terms_fee = $this->getRequest()->getPost('terms_fee'); //Get AddMore Fields From View                                            $terms_id = $this->getRequest()->getPost('term_id');												//$termss_id = $this->getRequest()->getPost('terms_id');                        foreach ($terms_fee['grand_result1'] as $key => $grand_result1) {                                                        //$counts = $terms_fee['count'];                            //$count_i = $terms_fee['count_i'];                            $fee_data = array("structure_id" => $last_insert_id,                                                        "total_grand_value" => $terms_fee['grandtotal_total'][$key],                            );                            for($i=0;$i<count($terms_id); $i++)                            {                                $date = "t".($i+1)."_date";                                $grand_terms =  "grand_term".($i+1)."_result";                                $grand_results = "grand_result".($i+1);                               $fee_data[$date] = $terms_fee[$date];                               $fee_data [$grand_terms] = $terms_fee[$grand_results][$key];                            }                             $FeeStructureItems_model->delete(array('structure_id =?' =>  $structure_id));                                              $FeeStructureItems_model->insert($fee_data);                        }//die;                        $terms = $this->getRequest()->getPost('terms');                        $termss_id = $this->getRequest()->getPost('terms_id');                        //echo'<pre>';print_r($terms);die;                        $FeeCategory_model = new Application_Model_FeeCategory();                                                     $Category_data = $FeeCategory_model->getCategory($degree_id,$session,$dept_type_id);                        $FeeHeads_model = new Application_Model_FeeHeads();                        for ($i = 0; $i < count($Category_data); $i++) {                            $terms_data['structure_id'] = $last_insert_id;                            $terms_data['category_id'] = $terms['category_id'][$i];                            $fee_heads = $FeeHeads_model->getFeehead_ids($Category_data[$i]['category_id']);                            for ($j = 0; $j < count($fee_heads); $j++) {                                //echo'<pre>';print_r($fee_heads[$j]['feehead_id']);die;                                                               for ($k = 1; $k <= count($terms_id); $k++) {                                                                           $terms_data['terms_id'] = $terms_id[$k-1];                                    $terms_data['terms'] = $k;									$terms_data['term_id'] = $termss_id[$k-1];									                                    $terms_data['fee_heads_id'] = $fee_heads[$j]['feehead_id'];                                    $terms_data['feeheads_total'] = empty($terms['feeheads_total_val' . $terms['category_id'][$i] . ''][$j])?0:$terms['feeheads_total_val' . $terms['category_id'][$i] . ''][$j];                                    //echo'<pre>';print_r($fee_heads);die;                                    $terms_data['fees'] = empty($_POST['term_' . $Category_data[$i]['category_id'] . '_' . $fee_heads[$j]['feehead_id'] . '_' . $k . ''])?0:$_POST['term_' . $Category_data[$i]['category_id'] . '_' . $fee_heads[$j]['feehead_id'] . '_' . $k . ''];                                                                        //echo'<pre>';print_r($terms_data);die;                                    //	$terms_data['term2_val'] = $terms['term_'.$terms['category_id'][$i].'_'.$fee_heads[$j]['feehead_id'].'_'.'2'];                                    //	$terms_data['term3_val'] = $terms['term_'.$terms['category_id'][$i].'_'.$fee_heads[$j]['feehead_id'].'_'.'3'];                                    //	$terms_data['term4_val'] = $terms['term_'.$terms['category_id'][$i].'_'.$fee_heads[$j]['feehead_id'].'_'.'4'];                                    //	$terms_data['term5_val'] = $terms['term_'.$terms['category_id'][$i].'_'.$fee_heads[$j]['feehead_id'].'_'.'5'];                                    unset($data['csrftoken']);                                    $terms_data['cat_row_total'] = empty($terms['cat_row_total' . $terms['category_id'][$i] . '_' . $i . ''])?0:$terms['cat_row_total' . $terms['category_id'][$i] . '_' . $i . ''];                                     $FeeStructureTermItems_model->delete(array('structure_id =?' =>  $structure_id));                                    $FeeStructureTermItems_model->insert($terms_data);                                    unset($_SESSION["token"]);                                    //echo $flag;                                    //$flag++;                                }                            }                        }                         $_SESSION['message_class'] = 'alert-success';                        $this->_flashMessenger->addMessage('Fee Structure Successfully Updated');                        $this->_redirect('fee-structure/index');                                   }  else {                                          $message="Invalid Token";                                          $_SESSION['message_class'] = 'alert-danger';                                           $this->_flashMessenger->addMessage($message);                                             $this->_redirect('fee-structure/index');                                                  }                                                      }	                    }                }                break;            case 'delete':                $data['status'] = 2;                if ($structure_id) {                    $FeeStructure_model->update($data, array('structure_id=?' => $structure_id));                    $FeeStructureItems_model->update($data, array('structure_id=?' => $structure_id));                    $this->_flashMessenger->addMessage('Details Deleted Successfully');                    $this->_redirect('fee-structure/index');                }                break;            default:                $messages = $this->_flashMessenger->getMessages();                $this->view->messages = $messages;                $result = $FeeStructure_model->getRecords();                $page = $this->_getParam('page', 1);                $paginator_data = array(                    'page' => $page,                    'result' => $result                );                $this->view->paginator = $this->_act->pagination($paginator_data);                break;        }    }    public function ajaxGetFeeStructureAction() {        $this->_helper->layout->disableLayout();        if ($this->_request->isPost() && $this->getRequest()->isXmlHttpRequest()) {            $academic_year_id = $this->_getParam("academic_year_id");            $structure_id = $this->_getParam("structure_id");                $Academic_model = new Application_Model_Academic();            $FeeCategory_model = new Application_Model_FeeCategory();          // $academic_year_id = $Academic_model->getRecordsByDepartment($department)[0]['academic_year_id'];            $FeeHeads_model = new Application_Model_FeeHeads();            $FeeStructure_model = new Application_Model_FeeStructure();            $StructureItems_model = new Application_Model_FeeStructureItems();            $term_model = new Application_Model_TermMaster();            $TermItems_model = new Application_Model_FeeStructureTermItems();            $dept_details = new Application_Model_Department();            $dept_type_details = new Application_Model_DepartmentType();               $acad_details =  $Academic_model->getRecord($academic_year_id);                          $department = $acad_details['department'];            $session = $acad_details['session'];            $department = !empty($department)?$department:exit;                        $dept_type_id = $dept_details->getRecord($department)['department_type'];            $dept_type_id = !empty($dept_type_id)?$dept_type_id:exit;                                    if (!empty($structure_id)) {                 $result = $TermItems_model->getItemRecords($structure_id);                            $this->view->result = $result;            $result1 = $StructureItems_model->getStructureRecords($structure_id);            $this->view->result1 = $result1;            $academic_id  = $TermItems_model->getAcademicId($structure_id);              $terms_data = $term_model->getRecordByAcademicId($academic_year_id);                        $degree_id = $Academic_model->getAcademicDegree($academic_year_id);                    $this->view->term_data = $terms_data;             $this->view->structure_id = $structure_id;            $Category_data = $FeeCategory_model->getCategory($degree_id['degree_id'],$session,$dept_type_id);            $this->view->Category_data = $Category_data;                        $Feeheads_data = $FeeHeads_model->getFeeheads($degree_id['degree_id'],$session,$dept_type_id);                       $this->view->Feeheads_data = $Feeheads_data;            } else {                if (!empty($academic_year_id)) {                    // $student_model = new Application_Model_StudentPortal();                    $degree_id = $Academic_model->getAcademicDegree($academic_year_id);                    $Category_data = $FeeCategory_model->getCategory($degree_id,$session,$dept_type_id);                    $this->view->Category_data = $Category_data;                    $Feeheads_data = $FeeHeads_model->getFeeheads($degree_id,$session,$dept_type_id);                    $terms_data = $term_model->getRecordByAcademicId($academic_year_id);                    $this->view->term_data = $terms_data;                     $this->view->structure_id = 0;                    $this->view->Feeheads_data = $Feeheads_data;                    // $Electivecourse_model = new Application_Model_ElectiveCourseLearning();                    //  $electives = $Electivecourse_model->getDropDownList();                                          // echo "<pre>";  print_r($Category_data);                 // echo "<pre>";  print_r($Feeheads_data);die;                    //$this->view->electives = $electives;                }            }        }    }    public function ajaxGetCheckFeeDataAction() {        $this->_helper->layout->disableLayout();        if ($this->_request->isPost() && $this->getRequest()->isXmlHttpRequest()) {            $academic_year_id = $this->_getParam("academic_year_id");            //$year_id = $this->_getParam("year_id");            //echo $academic_year_id;die;            $FeeStructure_model = new Application_Model_FeeStructure();            $grade_result = $FeeStructure_model->getValidFeeRecord($academic_year_id);            $counts = count($grade_result['structure_id']);            //print_r($counts);die;            echo json_encode($counts);            die;            $this->view->grade_result = $grade_result;        }    }    public function ajaxGetFeeDetailsViewAction() {        $FeeCategory_model = new Application_Model_FeeCategory();        $FeeHeads_model = new Application_Model_FeeHeads();        $Academic_model = new Application_Model_Academic();        $FeeStructure_model = new Application_Model_FeeStructure();        $StructureItems_model = new Application_Model_FeeStructureItems();         $term_model = new Application_Model_TermMaster();        $TermItems_model = new Application_Model_FeeStructureTermItems();        $structure_id = $this->_getParam("id");        $this->view->structure_id = $structure_id;               $type = $this->_getParam("type");        $this->view->type = $type;        //$this->view->form = $GradeAllocationReport_form;        $this->_helper->layout->disableLayout();        if ($this->_request->isPost() && $this->getRequest()->isXmlHttpRequest()) {            $result = $TermItems_model->getItemRecords($structure_id);                        $this->view->result = $result;            $result1 = $StructureItems_model->getStructureRecords($structure_id);            //echo "<pre>";print_r($result1);exit;            $this->view->result1 = $result1;                                    $academic_year_id  = $TermItems_model->getAcademicId($structure_id);                          // $academic = $Academic_model->getRecordsByDepartment($academic_year_id['department'])[0]['academic_year_id'];//echo "<pre>"; print_r($academic_year_id);exit;              $terms_data = $term_model->getRecordByAcademicId($academic_year_id['academic_id']);                              $reqIds= $Academic_model->getAcademicDegreeForSession($academic_year_id['academic_id']);//                echo "<pre>";print_r($reqIds);exit;                    $this->view->term_data = $terms_data;                          $Category_data = $FeeCategory_model->getCategory($reqIds['degree_id'],$reqIds['session'],$reqIds['department_type']);            //echo "<pre>";print_r($Category_data);exit;            $this->view->Category_data = $Category_data;            $Feeheads_data = $FeeHeads_model->getFeeheads($reqIds['degree_id'],$reqIds['session'],$reqIds['department_type']);            // print_r($Feeheads_data);die;            $this->view->Feeheads_data = $Feeheads_data;        }    }    public function structurePdfAction() {        $FeeCategory_model = new Application_Model_FeeCategory();        $FeeHeads_model = new Application_Model_FeeHeads();        $FeeStructure_model = new Application_Model_FeeStructure();        $StructureItems_model = new Application_Model_FeeStructureItems();        $TermItems_model = new Application_Model_FeeStructureTermItems();        $structure_id = $this->_getParam("id");        $this->view->structure_id = $structure_id;        //print_r($structure_id); die;        $result = $TermItems_model->getItemRecords($structure_id);        //print_r($result);die;        $this->view->result = $result;        $result1 = $StructureItems_model->getStructureRecords($structure_id);        //print_r($result1);die;        $this->view->result1 = $result1;        $Category_data = $FeeCategory_model->getCategory();        $this->view->Category_data = $Category_data;        $Feeheads_data = $FeeHeads_model->getFeeheads();        // print_r($Feeheads_data);die;        $this->view->Feeheads_data = $Feeheads_data;        $pdfheader = $this->view->render('fee-structure/pdfheader.phtml');        $pdffooter = $this->view->render('fee-structure/pdffooter.phtml');        $htmlcontent = $this->view->render('fee-structure/structure-pdf.phtml');        $this->_act->generatePdf($pdfheader, $pdffooter, $htmlcontent, "Fee Structure Report Details");    }}