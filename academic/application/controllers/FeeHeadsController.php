<?phpclass FeeHeadsController extends Zend_Controller_Action {    private $_siteurl = null;    private $_db = null;    private $_flashMessenger = null;    private $_authontication = null;    private $_agentsdata = null;    private $_usersdata = null;    private $_act = null;    private $_adminsettings = null;    Private $_unit_id = null;    private $accessConfig = NULL;    public function init() {        $zendConfig = new Zend_Config_Ini(            APPLICATION_PATH . '/configs/application.ini', APPLICATION_ENV);        require_once APPLICATION_PATH . '/configs/access_level.inc';        $this->accessConfig = new accessLevel();        $config = $zendConfig->mainconfig->toArray();        $this->view->mainconfig = $config;        $this->_action = $this->getRequest()->getActionName();        //access role id        $this->roleConfig = $config_role = $zendConfig->role_administrator->toArray();        $this->view->administrator_role = $config_role;        $storage = new Zend_Session_Namespace("admin_login");        $this->login_storage = $data = $storage->admin_login;        $this->view->login_storage = $data;        //print_r($data);exit;        if (isset($data)) {            $this->view->role_id = $data->role_id;            $this->view->login_empl_id = $data->empl_id;        }        if ($this->_action == "login" || $this->_action == "forgot-password") {            $this->_helper->layout->setLayout("adminlogin");        } else {            $this->_helper->layout->setLayout("layout");        }        $this->_act = new Application_Model_Adminactions();        $this->_db = Zend_Db_Table::getDefaultAdapter();        $this->_flashMessenger = $this->_helper->FlashMessenger;        $this->authonticate();    }    protected function authonticate() {        $storage = new Zend_Session_Namespace("admin_login");        $data = $storage->admin_login;        if ($data->role_id == 0)            $this->_redirect('student-portal/student-dashboard');        if (!$data && $this->_action != 'login' &&            $this->_action != 'forgot-password') {            $this->_redirect('index/login');            return;        }        if ($this->_action != 'forgot-password') {            $this->_authontication = $data;            $this->_agentsdata = $storage->agents_data;        }    }    public function indexAction() {        $this->view->action_name = 'Fees';        $this->view->sub_title_name = 'Fee Heads';        $this->accessConfig->setAccess('SA_ACAD_FEE_HEADS');        $FeeHeads_model = new Application_Model_FeeHeads();        $FeeHeads_form = new Application_Form_FeeHeads();        $FeeHeadItems_model = new Application_Model_FeeHeadItems();        $feeItems = new Application_Model_FeeStructureTermItems();        $feehead_id = $this->_getParam("id");        $cat_id = $this->_getParam("cat_id");        $type = $this->_getParam("type");        $session = $this->_getParam("session");        $this->view->type = $type;        $this->view->form = $FeeHeads_form;        if (empty($_SESSION['token'])) {            $_SESSION['token'] = bin2hex(random_bytes(32));        }        $token = $_SESSION['token'];        switch ($type) {            case "bulkadd":                if ($this->getRequest()->isPost()) {                        $data = $_POST;	                                                $FeeHeads_model->delete(                            array(                            'degree_id=?' => $data['degree_id'],                                'feecategory_id=?' => $data['feecategory_id'][0],                                'session_id=?' => $data['mig_session']                            )                            );                                                                        if (!empty($data['csrftoken'])) {                            if ($data['csrftoken'] === $token) {                                 foreach ($_POST['feecategory_id'] as $key => $feehead_name) {                                                                                                            $fee_data = array(                                                                                "feecategory_id" =>  $data['feecategory_id'][$key],                                        "degree_id" => $data['degree_id'],                                        "session_id" => $data['mig_session'],                                        "dept_id" => $data['dept_id'],                                        "feehead_name" => $data['feehead_name'][$key]                                    );                                                                        //print_r($fee_data);die;                                    $FeeHeads_model->insert($fee_data);                                    unset($_SESSION["token"]);                                }                                $_SESSION['message_class'] = 'alert-success';                                $this->_flashMessenger->addMessage('Bulk Fee Head Successfully added');                                $this->_redirect('fee-heads/index');                            } else {                                $message = "Invalid Token";                                $_SESSION['message_class'] = 'alert-danger';                                $this->_flashMessenger->addMessage($message);                                $this->_redirect('fee-heads/index?v2');                            }                        }                                    }                break;            case "add":                if ($this->getRequest()->isPost()) {                                           $data = $_POST;                        $insertData = array(                            'session' => $data['session'],                            'dept_id' => $data['dept_id'],                            'feecategory_id' => $data['feecategory_id'],                            'degree_id' => $data['degree_id'],                        );                        //$last_insert_id=$FeeHeads_model->insert($data);	                        if (!empty($data['csrftoken'])) {                            if ($data['csrftoken'] === $token) {                                $Fee = $this->getRequest()->getPost('Fee'); //Get AddMore Fields From View                                //echo '<pre>'; print_r($Fee);die;                                 foreach ($_POST['heads'] as $key => $feehead_name) {                                    // if ($this->getRequest()->getPost('session') >= 7) {                                        $fee_data = array("feecategory_id" => $this->getRequest()->getPost('feecategory_id'),                                            "degree_id" => $this->getRequest()->getPost('degree_id'),                                            "session_id" => $this->getRequest()->getPost('session'),                                            "dept_id" => $this->getRequest()->getPost('dept_id'),                                            "feehead_name" => $feehead_name);                                    // } else {                                    //     $fee_data = array("feecategory_id" => $this->getRequest()->getPost('feecategory_id'),                                    //         "degree_id" => $this->getRequest()->getPost('degree_id'),                                    //         "session_id" => 0,                                    //         "dept_id" => 0,                                    //         "feehead_name" => $feehead_name);                                    // }                                    //print_r($fee_data);die;                                    $FeeHeads_model->insert($fee_data);                                    unset($_SESSION["token"]);                                }                                $_SESSION['message_class'] = 'alert-success';                                $this->_flashMessenger->addMessage('Fee Head Successfully added');                                $this->_redirect('fee-heads/index');                            } else {                                $message = "Invalid Token";                                $_SESSION['message_class'] = 'alert-danger';                                $this->_flashMessenger->addMessage($message);                                $this->_redirect('fee-heads/index?v2');                            }                        }                                    }                break;            case 'edit':                $result = $FeeHeads_model->getRecordbydegree($feehead_id, $cat_id,$session);                //	$item_result= $FeeHeadItems_model->getItemRecords($feehead_id);                //  echo "<pre>";print_r($result);die;                $this->view->item_result = $result;                $item_result['feecategory_id'] = $result[0]['feecategory_id'];                $item_result['degree_id'] = $result[0]['degree_id'];                $item_result['session'] = $result[0]['session_id'];                $item_result['dept_id'] = $result[0]['dept_id'];                $FeeHeads_form->populate($item_result);                $this->view->result = $result;                if ($this->getRequest()->isPost()) {                    //if ($FeeHeads_form->isValid($this->getRequest()->getPost())) {                        //$data = $FeeHeads_form->getValues();                        $data = $_POST;                                                $updateData = array(                            'session' => $data['session'],                            'dept_id' => $data['dept_id'],                            'feecategory_id' => $data['feecategory_id'],                            'degree_id' => $data['degree_id'],                        );                        if (!empty($data['csrftoken'])) {                            if ($data['csrftoken'] === $token) {                                $FeeHeads_model->delete(array('degree_id=?' => $feehead_id, 'feecategory_id=?' => $cat_id, 'feehead_id not in (?)' => $_POST['heads_id']));                                $Fee = $this->getRequest()->getPost('Fee');                                //print_r($Fee);die;                                //  $FeeHeadItems_model->trashItems($feehead_id); //Delete Fields in Company						                                //	echo "<pre>"; print_r($_POST['heads']); die;                                foreach ($_POST['heads_id'] as $key => $feehead_id) {                                    if ($this->getRequest()->getPost('session') >= 7) {                                        $fee_data = array("feecategory_id" => $this->getRequest()->getPost('feecategory_id'),                                            "degree_id" => $this->getRequest()->getPost('degree_id'),                                            "session_id" => $this->getRequest()->getPost('session'),                                            "dept_id" => $this->getRequest()->getPost('dept_id'),                                            "feehead_name" => $_POST['heads'][$key]);                                    } else {                                        $fee_data = array("feecategory_id" => $this->getRequest()->getPost('feecategory_id'),                                            "degree_id" => $this->getRequest()->getPost('degree_id'),                                            "session_id" => $this->getRequest()->getPost('session'),                                            "dept_id" => $this->getRequest()->getPost('dept_id'),                                            "feehead_name" => $_POST['heads'][$key]);                                    }                                   // print_r($fee_data);die;                                    $FeeHeads_model->update($fee_data, array('feehead_id =?' => $feehead_id));                                }                                foreach ($_POST['heads'] as $key => $feehead_name) {                                    if (!isset($_POST['heads_id'][$key])) {                                        $fee_data = array("feecategory_id" => $this->getRequest()->getPost('feecategory_id'),                                            "degree_id" => $this->getRequest()->getPost('degree_id'),                                            "feehead_name" => $_POST['heads'][$key]);                                        $FeeHeads_model->insert($fee_data);                                    }                                }                                $category_id = array("category_id" => $this->getRequest()->getPost('feecategory_id'));                                $feeItems->update($category_id, array('category_id = ?' => $cat_id));                                unset($_SESSION["token"]);                                $_SESSION['message_class'] = 'alert-success';                                $this->_flashMessenger->addMessage('Details Updated Successfully');                                $this->_redirect('fee-heads/index');                            } else {                                $message = "Invalid Token";                                $_SESSION['message_class'] = 'alert-danger';                                $this->_flashMessenger->addMessage($message);                                $this->_redirect('fee-heads/index?v2');                            }                        }//                    } else {////                        //$this->_redirect('fee-heads/index');						//                    }                }                break;            case 'delete':                $data['status'] = 2;                if ($feehead_id) {                    $FeeHeads_model->update($data, array('feehead_id=?' => $feehead_id));                    $FeeHeadItems_model->update($data, array('feehead_id=?' => $feehead_id));                    $this->_flashMessenger->addMessage('Details Deleted Successfully');                    $this->_redirect('fee-heads/index');                }                break;            default:                $messages = $this->_flashMessenger->getMessages();                $this->view->messages = $messages;                $result = $FeeHeads_model->getRecords();                $page = $this->_getParam('page', 1);                $paginator_data = array(                    'page' => $page,                    'result' => $result                );                $this->view->paginator = $this->_act->pagination($paginator_data);                break;        }    }    public function ajaxGetCatAction() {        $this->_helper->layout->disableLayout();        if ($this->_request->isPost() && $this->getRequest()->isXmlHttpRequest()) {            $id = $this->_getParam("degree_id");            $session = $this->_getParam("session");            $dept_id = $this->_getParam("dept_id");            $application = new Application_Model_FeeCategory();            $result = $application->getRecordByDegreeId1($id, $session, $dept_id);            echo "<option>--select--</option>";            foreach ($result as $key => $value) {                echo "<option value='" . $value['category_id'] . "'>" . $value['category_name'] . "</option>";            }            die;        }    }    public function ajaxGetFeeHeadNameAction(){        $this->_helper->layout->disableLayout();        if ($this->_request->isPost() && $this->getRequest()->isXmlHttpRequest()) {            $cat_id = $this->_getParam("cat_id");            $degree = $this->_getParam("degree");            $session = $this->_getParam("session");            $dept_id = $this->_getParam("dept_id");            $application = new Application_Model_FeeHeads();            $result = $application->getFeeheads($degree, $session, $dept_id,$cat_id);            //echo '<pre>'; print_r($result);exit;            $paginator_data = array(                'page' => $page,                'result' => $result            );            $this->view->paginator = $this->_act->pagination($paginator_data);        }    }}