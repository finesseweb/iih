<?php/* * ********************************************************************  Released underhe GNU General Public License, GPL,  as published by the Free Software Foundation, either version 3  of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful,  but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the License here <http://www.gnu.org/licenses/gpl-3.0.html>. * ********************************************************************* */function add_statutory($statutory_name, $statutory_desc) {    $sql = "INSERT INTO " . TB_PREF . "statutory_body_master (statutory_name, statutory_desc) 		VALUES (" . db_escape(ucfirst($statutory_name)) . "," . db_escape(ucfirst($statutory_desc)) . ")";    db_query($sql, "could not add statutory");}function hasStatutorybody($statutory_name = '') {    $sql = "SELECT * FROM " . TB_PREF . "statutory_body_master WHERE statutory_name = " . db_escape(ucfirst($statutory_name)) . " AND inactive = 0";//display_error($sql);    $result = db_query($sql, "updated");    return db_num_rows($result);}function add_product_master($name, $code) {    $due_date = date2sql($due_date);    $sql = "INSERT INTO " . TB_PREF . "product_master (name,code)"            . "VALUES (" . db_escape($name) . "," . db_escape($code)  .  ")";    db_query($sql, "could not add product");}function add_statutory_main($statutory_name, $return_name, $freq_name, $Remarks, $fyear, $empl_id,$freq_days) {    $due_date = date2sql($due_date);    $sql = "INSERT INTO " . TB_PREF . "statutory_main (statutory_id,return_id,freq_id,statutory_desc,f_year,updated_date,empl_id)"            . "VALUES (" . db_escape($statutory_name) . "," . db_escape($return_name) . "," . db_escape($freq_name) . "," . db_escape($Remarks) . "," . db_escape($fyear) . "," . db_escape(date('Y-m-d')) . "," . db_escape($empl_id) . ")";    if (db_query($sql, "could not add statutory")) {        $sql = "select max(id) as id from fa_statutory_main where 1 = 1";        $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);        //    echo $row[0];                update_status($statutory_name, $return_name, $freq_name, $due_date, $reminder_days, $Remarks,$freq_days);        return $row[0];    }    return false;}function add_asset_main($product_id, $code,$qty) {    $sql = "INSERT INTO " . TB_PREF . "asset_master (product_id,code,qty)"            . "VALUES (" . db_escape($product_id) . "," . db_escape($code) . "," . db_escape($qty) . ")";    if (db_query($sql, "could not add asset")) {        $sql = "select max(asset_id) as id from fa_asset_master where 1 = 1";        $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);        //    echo $row[0];             //   update_status($statutory_name, $return_name, $freq_name, $due_date, $reminder_days, $Remarks,$freq_days);        return $row[0];    }    return false;}function add_sub_asset_main($asset_id, $code,$cat_id,$sub_cat_id) {    $sql = "INSERT INTO " . TB_PREF . "sub_asset_master (asset_id,code,cat_id,sub_cat_id)"            . "VALUES (" . db_escape($asset_id) . "," . db_escape($code)  . "," . db_escape($cat_id) . "," . db_escape($sub_cat_id) . ")";    if (db_query($sql, "could not add asset")) {        $sql = "select max(sub_asset_id) as id from fa_sub_asset_master where 1 = 1";        $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);        return $row[0];    }    return false;}function update_asset($product_id, $code,$id,$qty) {    $sql = "UPDATE " . TB_PREF . "asset_master SET code=" . db_escape($code) . ",product_id=".db_escape($product_id).",qty=".db_escape($qty)." WHERE asset_id=" . db_escape($id);    //display_error($sql);    db_query($sql, "The CV could not be updated");}function is_asset($product_id, $code) {        $sql = "select max(asset_id) as id from fa_asset_master where product_id = $product_id and code = '$code'";        $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);       if($row[0])           return $row[0];       else           return false;    }function add_room($asset_id,$room_no,$qty){ $sql = "INSERT INTO " . TB_PREF . "room_main (asset_id,room_no,qty)"            . "VALUES (" .db_escape($asset_id) . ",". db_escape($room_no) . "," . db_escape($qty)  . ")";            db_query($sql, "could not add asset");            }function update_room($id,$asset_id,$room_no,$qty) {    $sql = "UPDATE " . TB_PREF . "room_main SET asset_id=" . db_escape($asset_id) . ",room_no=".db_escape($room_no).",qty=".db_escape($qty)." WHERE id=" . db_escape($id);  //  display_error($sql);    db_query($sql, "The room could not be updated");}function delete_room($id){ $sql = "delete from " . TB_PREF . "room_main where asset_id = $id";   // display_error($sql);    db_query($sql, "could not add assembled asset");}function get_room($id){    $sql = "select * from " . TB_PREF . "room_main where asset_id = $id";    return db_query($sql, "could not add assembled asset");}function get_room_all($inactive){    $sql = "select fa_room_main.*,fa_asset_master.product_id from " . TB_PREF . "room_main,fa_asset_master,fa_product_master where fa_asset_master.asset_id = fa_room_main.asset_id and fa_asset_master.product_id = fa_product_master.id ";    if(!$inactive){    $sql.=" and !fa_asset_master.inactive";    $sql.=" and !fa_product_master.inactive";    }    $sql.=" group by fa_room_main.asset_id";    return db_query($sql, "could not add assembled asset");}function get_room_details($id){if($id){    $sql = "select * from " . TB_PREF . "room_main where id = $id";   // display_error($sql);    $result = db_query($sql, "could not add assembled asset");$row = db_fetch_row($result);      return $row;      }}function get_seat_details($id,$department){    $sql = "SELECT * FROM `fa_department_master` as master,fa_department_allocation as alloc where master.id = alloc.master_id  and room = $id and alloc.id = $department ";    $result = db_query($sql, "could not add assembled asset");    ///display_error($sql);$row = db_fetch($result);      return $row;}function get_department_allocation_by_id($id){    $sql = "SELECT * from fa_department_allocation where id = $id "; $result = db_query($sql, "could not retrive department allocation");$row = db_fetch($result);      return $row;}function is_sub_asset($asset_id, $code) {        $sql = "select max(sub_asset_id) as id from fa_sub_asset_master where asset_id = $asset_id and code = '$code'";        $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);       if($row[0])           return $row[0];       else           return false;    }function is_deparment($building, $floor,$room) {        $sql = "select id from fa_department_master where building = $building and floor = $floor and room = $room";                $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);       if($row[0])           return $row[0];       else           return false;    }function is_seat($building, $floor,$room,$department) {        $sql = "select id from fa_seat_master where building = $building and floor = $floor and room = $room and department = $department";               $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);       if($row[0])           return $row[0];       else           return false;    }function is_room($building, $floor) {        $sql = "select id from fa_room_main where  asset_id = $floor ";                $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);       if($row[0])           return $row[0];       else           return false;    }function add_department_master($building, $floor,$room) {    $sql = "INSERT INTO " . TB_PREF . "department_master (building, floor,room)"            . "VALUES (" . db_escape($building) . "," . db_escape($floor). "," . db_escape($room).  ")";   if (db_query($sql, "could not add department master")) {        $sql = "select max(id) as id from fa_department_master where 1 = 1";        $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);        return $row[0];    }    return false;}function add_seat_master($building, $floor,$room,$department) {    $sql = "INSERT INTO " . TB_PREF . "seat_master (building, floor,room,department)"            . "VALUES (" . db_escape($building) . "," . db_escape($floor). "," . db_escape($room). "," . db_escape($department). ")";   if (db_query($sql, "could not add seat master")) {        $sql = "select max(id) as id from fa_seat_master where 1 = 1";        $result = db_query($sql, "could not add statutory");        $row = db_fetch_row($result);        return $row[0];    }    return false;}function update_department_master($id,$building, $floor,$room){ $sql = "UPDATE " . TB_PREF . "department_master SET building=" . db_escape($building) . ",floor=".db_escape($floor).",room=".db_escape($room)." WHERE `id`=$id";    db_query($sql, "could not update department_master");}function update_seat_master($id,$building, $floor,$room,$department){ $sql = "UPDATE " . TB_PREF . "seat_master SET building=" . db_escape($building) . ",floor=".db_escape($floor).",room=".db_escape($room).",department=".db_escape($department)." WHERE `id`=$id";    db_query($sql, "could not update seat_master");}function get_department_master($inactive){   $sql = "select fa_department_master.*,fa_room_main.inactive as inactive_room from fa_department_master,fa_asset_master,fa_product_master,fa_room_main where fa_department_master.building = fa_product_master.id and fa_asset_master.asset_id = fa_department_master.floor and fa_room_main.id = fa_department_master.room ";   if(!$inactive){   $sql.=" and !fa_asset_master.inactive";   $sql.=" and !fa_product_master.inactive";   $sql.=" and !fa_room_main.inactive";   }  return  db_query($sql, "could not add statutory");   }function get_seat_master($inactive){   $sql = "SELECT fa_seat_master.* FROM `fa_seat_master`,`fa_department_master`,`fa_department_allocation`,fa_asset_master,fa_product_master,fa_room_main where fa_seat_master.building = fa_department_master.building and fa_seat_master.floor = fa_department_master.floor and fa_seat_master.room = fa_department_master.room and fa_department_master.id = fa_department_allocation.master_id and fa_seat_master.department = fa_department_allocation.id and fa_asset_master.asset_id = fa_department_master.floor and fa_product_master.id = fa_department_master.building and fa_room_main.id = fa_department_master.room";   if(!$inactive){   $sql.=" and !fa_department_allocation.inactive";     $sql.=" and !fa_asset_master.inactive";       $sql.=" and !fa_product_master.inactive";         $sql.=" and !fa_room_main.inactive";   }  // display_error($sql);  return  db_query($sql, "could not add statutory");   }function get_seat_count($dept){   $sql = "SELECT fa_seat_allocation.* FROM fa_seat_allocation join fa_seat_master on fa_seat_master.id=fa_seat_allocation.master_id where fa_seat_master.department=$dept";    $result= db_query($sql, "could not add statutory");    $row= db_num_rows($result);      return $row;   }function get_department_master_id($id){   $sql = "select * from fa_department_master where id = $id";     return  db_query($sql, "could not add statutory");   }function get_seat_master_id($id){   $sql = "select * from fa_seat_master where id = $id";  return  db_query($sql, "could not add statutory");   }function get_room_alloted_quantity($id){$sql = "select sum(fa_department_allocation.quantity) as qty from fa_department_master,fa_department_allocation where fa_department_master.id = fa_department_allocation.master_id  and fa_department_master.room = $id and !fa_department_allocation.inactive group by master_id";$result = db_query($sql, "could not add department allocation");        $row = db_fetch($result);        return $row;}function get_alloted_seat($room,$department){$sql = "SELECT count(*) as qty FROM `fa_seat_master`,fa_seat_allocation,fa_department_master,fa_department_allocation where fa_seat_master.id = fa_seat_allocation.master_id and fa_department_allocation.master_id=fa_department_master.id and  fa_seat_master.room = $room and fa_department_master.room=$room and fa_department_allocation.department_id ='".$department."'";$result = db_query($sql, "could not add department allocation");        $row = db_fetch($result);        return $row;}function add_assemble_asset_main($categor_id, $sub_category_id,$stock_id,$qty,$asset_id) {    $sql = "INSERT INTO " . TB_PREF . "assembled_assets (item_category_id ,item_sub_category_id ,stock_id,qty,asset_id )"            . "VALUES (" . db_escape($categor_id) . "," . db_escape($sub_category_id). "," . db_escape($stock_id). "," . db_escape($qty)  . "," . db_escape($asset_id)  . ")";   db_query($sql, "could not add assembled asset");}function add_department_allocation($master_id,$dept_id,$qty) {    $sql = "INSERT INTO " . TB_PREF . "department_allocation (master_id ,department_id ,quantity )"            . "VALUES (" . db_escape($master_id) . "," . db_escape($dept_id). "," . db_escape($qty).  ")";   db_query($sql, "could not add assembled asset");}function add_seat_allocation($master_id,$seat_no) {    $sql = "INSERT INTO " . TB_PREF . "seat_allocation (master_id ,seat_no )"            . "VALUES (" . db_escape($master_id) . "," . db_escape($seat_no).")";   db_query($sql, "could not add assembled asset");}function get_department_allocation($master_id){ $sql = "select * from fa_department_allocation where master_id = $master_id";  return  db_query($sql, "could get department allocation");}function get_seat_allocation($master_id){ $sql = "select * from fa_seat_allocation where master_id = $master_id";  return  db_query($sql, "could get seat allocation");}function add_assemble_serial_main($asset_id,$assmbl_id,$sl,$sub_asset_id) {    $sql = "INSERT INTO " . TB_PREF . "stock_serial_no (assmbl_id ,serial_no ,asset_id,sub_asset_id )"            . "VALUES (" . db_escape($assmbl_id) . "," . db_escape($sl) . "," . db_escape($asset_id)  ."," . db_escape($sub_asset_id). ")";   db_query($sql, "could not add assembled assemble");}function add_grn_serial_main($grn_batch_id,$sl,$stock_id,$warranty,$to_date,$from_date,$osl){$to_date = date2sql($to_date);  $from_date = date2sql($from_date);     $sql = "INSERT INTO " . TB_PREF . "grn_serial_no (grn_batch_id ,sl_no ,osl_no,stock_id,warranty,from_date,to_date)"            . "VALUES (" . db_escape($grn_batch_id) . "," . db_escape($sl) . "," . db_escape($osl) . "," . db_escape($stock_id) .",". db_escape($warranty) . "," . db_escape($to_date) . "," . db_escape($from_date) . ")";   db_query($sql, "could not add assembled assemble");}function get_grn_serial_no(){}function delete_assemble_asset($asset_id){    $sql = "delete from " . TB_PREF . "assembled_assets where asset_id = $asset_id";   // display_error($sql);    db_query($sql, "could not add assembled asset");}function delete_assemble_main($asset_id,$sub_asset_id){    $sql = "delete from " . TB_PREF . "stock_serial_no where asset_id = $asset_id and sub_asset_id = $sub_asset_id";    db_query($sql, "could not add assembled asset");}function hasStatutory($statutory_name = '', $return_name = '', $freq_name = '', $f_year = '') {    $sql = "SELECT * FROM " . TB_PREF . "statutory_main WHERE statutory_id = $statutory_name AND return_id = $return_name AND freq_id = $freq_name AND f_year = $f_year";    $result = db_query($sql, "updated");    return db_num_rows($result);}function isAssigned($statutory_name = '', $return_name = '', $freq_name = '') {    $sql = "SELECT * FROM " . TB_PREF . "statutory_master WHERE statutory_id = $statutory_name AND return_id = $return_name AND freq_id = $freq_name AND status = 0";    $result = db_query($sql, "updated");    return db_num_rows($result);}function hasProductMaster($code) {    $sql = "SELECT * FROM " . TB_PREF . "product_master WHERE code = $code and inactive = 0";//display_error($sql);    $result = db_query($sql, "updated");    return db_num_rows($result);}function get_all_matser() {    $sql = "SELECT * FROM " . TB_PREF . "statutory_master WHERE  !inactive";    return db_query($sql, "updated");}/*function getFrequencyDays($id){    $sql = "SELECT frequency_days FROM " . TB_PREF . "statutory_frequency_master WHERE freq_id = $id AND !inactive";    $result = db_query($sql, "couldnot get the frequency days");    $row = db_fetch_row($result);    return $row[0];}*/function update_status($statutory_name, $return_name, $freq_name, $Remarks, $fyear, $empl_id,$freq_days = 0) {                          $duedate = getEffectiveDate($statutory_name, $return_name, $freq_name, $Remarks, $fyear);          $NewDate = date('Y-m-d', strtotime($duedate . " +$freq_days days"));    $sql = "UPDATE " . TB_PREF . "statutory_master SET effective_date=" . db_escape($NewDate) . " WHERE statutory_id=" . db_escape($statutory_name) . "AND return_id = " . db_escape($return_name) . "AND freq_id =" . db_escape($freq_name);    //display_error($sql);    db_query($sql, "The CV could not be updated");}function getEffectiveDate($statutory_name, $return_name, $freq_name, $Remarks, $fyear){        $sql = "select effective_date from " . TB_PREF . "statutory_master  WHERE statutory_id=" . db_escape($statutory_name) . "AND return_id = " . db_escape($return_name) . "AND freq_id =" . db_escape($freq_name);    $result = db_query($sql, "The CV could not be updated");    $row = db_fetch_row($result);    return $row[0];}/* function update_statutory_main($statutory_name, $return_name, $freq_name,$Remarks,$fyear){  $due_date = date2sql($due_date);  $sql = "INSERT INTO ".TB_PREF."statutory_main (statutory_id,return_id,freq_id,statutory_desc,f_year,updated_date)"  . "VALUES (".db_escape($statutory_name).",".db_escape($return_name).",".db_escape($freq_name).",".db_escape($Remarks).",".db_escape($fyear).",".db_escape(date('Y-m-d')).")";  if(db_query($sql, "could not add statutory")){  $sql = "select max(id) as id from fa_statutory_main where 1 = 1";  $result = db_query($sql, "could not add statutory");  $row = db_fetch_row($result);  //    echo $row[0];  return $row[0];  }  return false ;  } */function add_upload($statutory_main, $title, $file_name, $unique_name) {    $date = date('Y-m-d');    $sql = "INSERT INTO " . TB_PREF . "statutory_uploads (statutory_main_id, title, file_name, unique_name,updated_date) VALUES ("            . db_escape($statutory_main) . ", "            . db_escape($title) . ", "            . db_escape($file_name) . ","            . db_escape($unique_name) . ","            . db_escape($date) . ")";    //display_error($sql);    db_query($sql, "The CV could not be updated");}function update_title($status_id, $title) {    $sql = "UPDATE " . TB_PREF . "statutory_uploads SET title=" . db_escape($title) . " WHERE id=" . db_escape($status_id);    db_query($sql, "The CV could not be updated");}function update_upload($status_id, $title, $file_name, $unique_name) {    $date = date('Y-m-d');    $sql = "UPDATE " . TB_PREF . "statutory_uploads SET title=" . db_escape($title) . ",		file_name=" . db_escape($file_name) . ",		unique_name=" . db_escape($unique_name) . " WHERE id=" . db_escape($status_id);    /* $sql = "INSERT INTO ".TB_PREF."statutory_uploads (statutory_main_id, title, file_name, unique_name,updated_date) VALUES ("      .db_escape($statutory_main).", "      .db_escape($title).", "      .db_escape($file_name).","      .db_escape($unique_name).","      .db_escape($date).")"; */    db_query($sql, "The CV could not be updated");}function get_all_asset_main($all = false, $empl_id) {    $sql = "SELECT fa_asset_master.* FROM " . TB_PREF . "asset_master,fa_product_master where fa_asset_master.product_id = fa_product_master.id ";    if (!$all){        $sql .= " and !fa_product_master.inactive";         $sql .= " and !fa_asset_master.inactive";        }      $sql.=" order by fa_product_master.name asc";    return db_query($sql, "could not get all Assets");}function get_room_quantity($id){ $sql = "SELECT * FROM " . TB_PREF . "asset_master where asset_id = $id";    if (!$all)        $sql .= " and !inactive";    return db_query($sql, "could not get all Assets");}function get_all_sub_asset_main($all = false) {    $sql = "SELECT * FROM " . TB_PREF . "sub_asset_master";    if (!$all)        $sql .= " WHERE !inactive";    return db_query($sql, "could not get all Assets");}function get_all_grn_main($all = false) {    $sql = "SELECT * FROM " . TB_PREF . "grn_serial_no as gr join fa_purch_order_details on fa_purch_order_details.item_code=gr.stock_id";    if (!$all)        $sql .= " WHERE !status";$sql .=" group by grn_batch_id,stock_id";    return db_query($sql, "could not get all Assets");}function get_all_grn_main_order_no($all = false,$order_no, $stock_id) {    $sql = "SELECT * FROM " . TB_PREF . "grn_serial_no ";    if (!$all)        $sql .= " WHERE grn_batch_id = $order_no and stock_id = ".db_escape($stock_id)."  and !status";    return db_query($sql, "could not get all Assets");}function get_sub_asset_main($id) {    $sql = "SELECT * FROM " . TB_PREF . "sub_asset_master";        $sql .= " WHERE sub_asset_id = $id";    return db_query($sql, "could not get all Assets");}function get_all_statutory_main_report($all = false, $empl_id, $f_year,$due_date) {    $due_date = $due_date = date2sql($due_date);    $sql = "SELECT * FROM " . TB_PREF . "statutory_main";    if (!$all)        $sql .= " WHERE !inactive  AND f_year = " . db_escape($f_year);    return db_query($sql, "could not get all Statutory");}function get_all_statutory_main_by_id($id) {//display_error($id);    $sql = "SELECT * FROM " . TB_PREF . "statutory_main where id= " . db_escape($id);    return db_query($sql, "could not get all Statutory");}function get_all_assembeld_assets($id) {//display_error($id);    $sql = "SELECT fa_stock_category.description,fa_stock_sub_category.sub_cat_name,fa_stock_master.description as item_name,fa_assembled_assets.* FROM " . TB_PREF . "assembled_assets," . TB_PREF . "stock_category," . TB_PREF . "stock_sub_category," . TB_PREF . "stock_master where"            . " fa_stock_category.category_id = fa_assembled_assets.item_category_id and fa_stock_sub_category.sub_cat_id=fa_assembled_assets.item_sub_category_id and fa_stock_master.stock_id= fa_assembled_assets.stock_id and fa_assembled_assets.asset_id = " . db_escape($id);       return db_query($sql, "could not get all Statutory");}function get_all_assembeld_main($id,$sub_asset_id) {//display_error($id);    $sql = "SELECT fa_stock_serial_no.serial_no,fa_stock_category.description,fa_stock_sub_category.sub_cat_name,fa_stock_master.description as item_name,fa_assembled_assets.* FROM " . TB_PREF . "assembled_assets," . TB_PREF . "stock_category," . TB_PREF . "stock_sub_category," . TB_PREF . "stock_master," . TB_PREF . "stock_serial_no where"            . " fa_stock_category.category_id = fa_assembled_assets.item_category_id and fa_stock_sub_category.sub_cat_id=fa_assembled_assets.item_sub_category_id and fa_stock_master.stock_id= fa_assembled_assets.stock_id  and fa_stock_serial_no.assmbl_id = fa_assembled_assets.id  and   fa_assembled_assets.asset_id = " . db_escape($id)." and fa_stock_serial_no.sub_asset_id=".db_escape($sub_asset_id);       return db_query($sql, "could not get all Statutory");}function get_all_grn($id,$stock_id){     $sql = "select * FROM " . TB_PREF . "purch_order_details join fa_stock_master on fa_stock_master.stock_id = fa_purch_order_details.item_code left JOIN  fa_grn_serial_no  on fa_grn_serial_no.grn_batch_id = fa_purch_order_details.order_no and fa_grn_serial_no.stock_id = fa_purch_order_details.item_codewhere fa_stock_master.sl_no = 1 and fa_purch_order_details.order_no = $id and fa_grn_serial_no.stock_id =".db_escape($stock_id)." and  fa_grn_serial_no.id is not null    ";    return db_query($sql, "could not get all Statutory");}function get_all_assets_assembeld($id) {//display_error($id);    $sql = "SELECT fa_stock_category.description,fa_stock_sub_category.sub_cat_name,fa_stock_master.description as item_name,fa_assembled_assets.* FROM " . TB_PREF . "assembled_assets," . TB_PREF . "stock_category," . TB_PREF . "stock_sub_category," . TB_PREF . "stock_master where"            . " fa_stock_category.category_id = fa_assembled_assets.item_category_id and fa_stock_sub_category.sub_cat_id=fa_assembled_assets.item_sub_category_id and fa_stock_master.stock_id= fa_assembled_assets.stock_id and fa_assembled_assets.id = " . db_escape($id);       return db_query($sql, "could not get all Statutory");}function get_all_statutory_upload_by_id2($id) {//display_error($id);    $sql = "SELECT * FROM " . TB_PREF . "statutory_uploads where id = " . db_escape($id);    return db_query($sql, "could not get all Statutory");}function get_all_statutory_upload_by_id_num($id) {//display_error($id);    $sql = "SELECT * FROM " . TB_PREF . "statutory_uploads where statutory_main_id = " . db_escape($id);    $res = db_query($sql, "could not get all Statutory");    $coun = db_num_rows($res);    return $coun;}function update_product_master($status_id, $name, $code) {        $sql = "UPDATE " . TB_PREF . "product_master SET name =" . db_escape($name) . ",code =" . db_escape($code) .  " WHERE id=" . db_escape($status_id);    db_query($sql, "could not update Product");}function update_sub_asset_main($status_id, $asset_id, $code,$cat_id,$sub_cat_id) {        $sql = "UPDATE " . TB_PREF . "sub_asset_master SET asset_id =" . db_escape($asset_id) . ",code =" . db_escape($code) . ",cat_id =" . db_escape($cat_id) . ",sub_cat_id =" . db_escape($sub_cat_id) .  " WHERE sub_asset_id=" . db_escape($status_id);    db_query($sql, "could not update sub_asset");}function update_statutory_master_date($status_id,$date) {   // display_error($status_id.'===='.$date);    $sql = "UPDATE " . TB_PREF . "statutory_master SET effective_date=" . db_escape($date) . " WHERE id=" . db_escape($status_id);    db_query($sql, "could not update Statutory");}function update_statutory_main($status_id, $statutory_name, $return_name, $freq_name, $Remarks, $fyear,$freq_days) {    $due_date = date2sql($due_date);    $sql = "UPDATE " . TB_PREF . "statutory_main SET statutory_id =" . db_escape($statutory_name) . ",return_id =" . db_escape($return_name) . ",freq_id =" . db_escape($freq_name) . ",remider_days =" . db_escape('') . ",statutory_desc=" . db_escape($Remarks) . ",f_year=" . db_escape($fyear) . ",updated_date=" . db_escape(date('Y-m-d')) . " WHERE id=" . db_escape($status_id);    //display_error($sql);    db_query($sql, "could not update Statutory");    update_status($statutory_name, $return_name, $freq_name, $due_date, $reminder_days, $Remarks,$freq_days);}function update_statutory($status_id, $statutory_name, $statutory_desc) {    $sql = "UPDATE " . TB_PREF . "statutory_body_master SET statutory_name=" . db_escape($statutory_name) . ",		statutory_desc=" . db_escape($statutory_desc) . " WHERE id=" . db_escape($status_id);    db_query($sql, "could not update Statutory");}function get_all_product_master($all = false) {    $sql = "SELECT * FROM " . TB_PREF . "product_master";    if (!$all)        $sql .= " WHERE !inactive";    return db_query($sql, "could not get all Product");}function get_statutory_name($all = false, $id) {    $sql = "SELECT statutory_name FROM " . TB_PREF . "statutory_body_master where id = " . db_escape($id);    if (!$all)        $sql .= " AND !inactive";    $result = db_query($sql, "could not get all Return Name");    $row = db_fetch_row($result);    //    echo $row[0];    return $row[0];}function get_product_name($id) {     $sql = "SELECT * FROM " . TB_PREF . "product_master where id = " . db_escape($id);    //if (!$all) $sql .= " AND !inactive";    $result = db_query($sql, "could not get all product");    $row = db_fetch_row($result);    //    echo $row[0];    return $row;}function get_asset_main($all = false, $id) {    $sql = "SELECT * FROM " . TB_PREF . "asset_master WHERE asset_id = $id ";       return db_query($sql, "could not get all Assets");}function get_grn_main($all = false, $id,$stock_id) {    $sql = "select * FROM fa_purch_order_details join fa_stock_master on fa_stock_master.stock_id = fa_purch_order_details.item_code where fa_stock_master.sl_no = 1 and fa_purch_order_details.order_no = $id and fa_purch_order_details.item_code = ".db_escape($stock_id); //display_error($sql);      return db_query($sql, "could not get all Assets");}function formatF($id){    $sql = "SELECT begin , end FROM " . TB_PREF . "fiscal_year where id = " . db_escape($id);    //if (!$all) $sql .= " AND !inactive";    $result = db_query($sql, "could not get all Return Name");    $row = db_fetch_row($result);    //    echo $row[0];    return $row;}function get_frequency_name($all = false, $id) {    $sql = "SELECT frequency_name FROM " . TB_PREF . "statutory_frequency_master where freq_id = " . db_escape($id);    if (!$all)        $sql .= " AND !inactive";    $result = db_query($sql, "could not get all Return Name");    $row = db_fetch_row($result);    //    echo $row[0];    return $row[0];}function get_all_statutory($all = false) {    $sql = "SELECT * FROM " . TB_PREF . "statutory_body_master";    if (!$all)        $sql .= " WHERE !inactive";    return db_query($sql, "could not get all Statutory");}function get_product_master($status_id) {    $sql = "SELECT * FROM " . TB_PREF . "product_master WHERE id=" . db_escape($status_id);    $result = db_query($sql, "could not get product");    return db_fetch($result);}function get_stock_master($stock_id,$order_no) {    $sql = "SELECT * FROM " . TB_PREF . "stock_master,fa_purch_order_details WHERE fa_purch_order_details.item_code = stock_id and fa_purch_order_details.order_no = $order_no and   stock_id=" . db_escape($stock_id);//display_error($sql);    return  db_query($sql, "could not get stocks");   // return db_fetch($result);}function get_statutory($status_id) {    $sql = "SELECT * FROM " . TB_PREF . "statutory_body_master WHERE id=" . db_escape($status_id);    $result = db_query($sql, "could not get Statutory");    return db_fetch($result);}function delete_statutory($status_id) {    $sql = "DELETE FROM " . TB_PREF . "statutory_body_master WHERE id=" . db_escape($status_id);    db_query($sql, "could not delete Statutory");}function delete_grn_serial($grn_id,$stock_id) {    $sql = "DELETE FROM " . TB_PREF . "grn_serial_no WHERE grn_batch_id=" . db_escape($grn_id)." and stock_id=" . db_escape($stock_id);    db_query($sql, "could not delete Statutory");}function product_list_row($label, $name, $selected_id = null, $submit_on_change = false, $disabled = false) {    echo "<tr><td class='label'>$label</td>";    product_list_cells(null, $name, $selected_id, $submit_on_change, $disabled);    echo "</tr>\n";}function add_assetitem($stock_id, $description, $long_description, $category_id, $sub_cat_name,	$tax_type_id, $units, $mb_flag){$sql = "INSERT INTO ".TB_PREF."stock_master (stock_id, description, long_description, category_id, sub_cat_name,		tax_type_id, units, mb_flag)		VALUES (".db_escape($stock_id).", ".db_escape($description).", ".db_escape($long_description).",		".db_escape($category_id).",".db_escape($sub_cat_name).", ".db_escape($tax_type_id).", "		.db_escape($units).", ".db_escape($mb_flag).")";	db_query($sql, "The item could not be added");	$sql = "INSERT INTO ".TB_PREF."loc_stock (loc_code, stock_id)		SELECT ".TB_PREF."locations.loc_code, ".db_escape($stock_id)		." FROM ".TB_PREF."locations";	db_query($sql, "The item locstock could not be added");	add_assetitem_code($stock_id, $stock_id, $description, $category_id, 1, 0);}function add_assetitem_code($item_code, $stock_id, $description, $category, $qty, $foreign=0){	$sql = "INSERT INTO ".TB_PREF."item_codes			(item_code, stock_id, description, category_id, quantity, is_foreign) 			VALUES( ".db_escape($item_code).",".db_escape($stock_id).",	  		".db_escape($description).",".db_escape($category)	  		.",".db_escape($qty).",".db_escape($foreign).")";	db_query($sql,"an item code could not be added");}function update_assetitem($stock_id, $description, $long_description, $category_id, $sub_cat_name, 	$tax_type_id, $units='', $mb_flag=''){	$sql = "UPDATE ".TB_PREF."stock_master SET long_description=".db_escape($long_description).",		description=".db_escape($description).",		category_id=".db_escape($category_id).",		sub_cat_name = ".db_escape($sub_cat_name).",		tax_type_id=".db_escape($tax_type_id);	if ($units != '')		$sql .= ", units=".db_escape($units);	if ($mb_flag != '')		$sql .= ", mb_flag=".db_escape($mb_flag);	$sql .= " WHERE stock_id=".db_escape($stock_id);	db_query($sql, "The item could not be updated");	update_assetitem_code(-1, $stock_id, $stock_id, $description, $category_id, 1, 0);}function update_assetitem_code($id, $item_code, $stock_id, $description, $category, $qty, $foreign=0){	$sql = "UPDATE ".TB_PREF."item_codes SET	 	item_code = ".db_escape($item_code).",	 	stock_id = ".db_escape($stock_id).",	 	description = ".db_escape($description).",	 	category_id = ".db_escape($category).",	 	quantity = ".db_escape($qty).",	 	is_foreign = ".db_escape($foreign)."        	WHERE ";				if ($id == -1) // update with unknown $id i.e. from items table editor	 	$sql .= "item_code = ".db_escape($item_code)		." AND stock_id = ".db_escape($stock_id);	else		$sql .= "id = ".db_escape($id);	db_query($sql,"an item code could not be updated");}function product_list_cells($label, $name, $selected_id = null, $submit_on_change, $disabled = false) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo product_list($name, $selected_id, $submit_on_change, $disabled);    echo "</td>\n";}function category_list_cells($label, $name, $selected_id = null, $submit_on_change, $disabled = false) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo category_list($name, $selected_id, $submit_on_change, $disabled);    echo "</td>\n";}function product_code_cells($label, $name, $selected_id = null, $submit_on_change, $disabled = false) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo product_code($name, $selected_id, $submit_on_change, $disabled);    echo "</td>\n";}function product_list($name, $selected_id = null, $submit_on_change, $disabled = false) {    ///$sql = "SELECT COALESCE(id,99) AS id, countries_name FROM ".TB_PREF."kv_countries";    //display_error($sql);    $sql = "select id,name FROM " . TB_PREF . "product_master where !inactive";    return combo_input($name, $selected_id, $sql, 'id', 'name', array(        'order' => 'name',        'spec_option' => false,        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));}function category_list($name, $selected_id = null, $submit_on_change, $disabled = false) {    ///$sql = "SELECT COALESCE(id,99) AS id, countries_name FROM ".TB_PREF."kv_countries";       $sql = "select category_id,description FROM " . TB_PREF . "stock_category where !inactive"; //display_error($sql);    return combo_input($name, $selected_id, $sql, 'category_id', 'description', array(        'order' => 'description',        'spec_option' => false,        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));}function grn_list_cells1($label, $name, $selected_id = null, $submit_on_change, $disabled = false) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo grn_list1($name, $selected_id, $submit_on_change, $disabled);    echo "</td>\n";}function grn_list1($name, $selected_id = null, $submit_on_change, $disabled = false) {    ///$sql = "SELECT COALESCE(id,99) AS id, countries_name FROM ".TB_PREF."grn_items";    //display_error($sql);    $sql = "select fa_purch_order_details.order_no as id,concat(fa_purch_order_details.pro_type,'-',fa_purch_order_details.order_no) as name FROM " . TB_PREF . "purch_order_details join fa_stock_master on fa_stock_master.stock_id = fa_purch_order_details.item_code left JOIN  fa_grn_serial_no  on fa_grn_serial_no.grn_batch_id = fa_purch_order_details.order_noand fa_purch_order_details.item_code = fa_grn_serial_no.stock_id where fa_stock_master.sl_no = 1  and  fa_grn_serial_no.id is null group by fa_purch_order_details.order_no   ";    return combo_input($name, $selected_id, $sql, 'id', 'name', array(        'order' => 'name',        'spec_option' => false,        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));}function room_list_row1($label, $name, $selected_id = null, $submit_on_change, $disabled = false,$id) {      echo "<tr>";    echo room_list_cells1($label,$name, $selected_id, $submit_on_change, $disabled,$id);    echo "</tr>\n";}function room_list_cells1($label, $name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo room_list($name, $selected_id, $submit_on_change, $disabled,$id);    echo "</td>\n";}function subcat_list_cells1($label, $name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo subcat_list($name, $selected_id, $submit_on_change, $disabled,$id);    echo "</td>\n";}function room_list($name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    ///$sql = "SELECT COALESCE(id,99) AS id, countries_name FROM ".TB_PREF."grn_items";    //display_error($sql);    $sql = "select asset_id,code from fa_asset_master where product_id = $id and !inactive";//display_error($sql);    return combo_input($name, $selected_id, $sql, 'asset_id', 'code', array(        'order' => 'code',        'spec_option' => '--select--',        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));}function subcat_list($name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    ///$sql = "SELECT COALESCE(id,99) AS id, countries_name FROM ".TB_PREF."grn_items";    //display_error($sql);    $sql = "select sub_cat_id,sub_cat_name from fa_stock_sub_category where category_id = $id and !inactive";//display_error($sql);    return combo_input($name, $selected_id, $sql, 'asset_id', 'code', array(        'order' => 'code',        'spec_option' => '--select--',        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));}function floor_list_row1($label,$name,$selected_id = null ,$submit_on_change, $disabled = false,$id) {      echo "<tr>";    echo floor_list_cells1($label,$name, $selected_id, $submit_on_change, $disabled,$id);    echo "</tr>\n";}function dept_list_row1($label,$name,$selected_id = null ,$submit_on_change, $disabled = false,$id) {      echo "<tr>";    echo dept_list_cells1($label,$name, $selected_id, $submit_on_change, $disabled,$id);    echo "</tr>\n";}function seat_list_row1($label,$name,$selected_id = null ,$submit_on_change, $disabled = false,$id) {      echo "<tr>";    echo seat_list_cells1($label,$name, $selected_id, $submit_on_change, $disabled,$id);    echo "</tr>\n";}function floor_list_cells1($label, $name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo floor_list($name, $selected_id, $submit_on_change, $disabled,$id);    echo "</td>\n";}function group_list_cells1($label, $name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo group_list($name, $selected_id, $submit_on_change, $disabled,$id);    echo "</td>\n";}function dept_list_cells1($label, $name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo dept_list($name, $selected_id, $submit_on_change, $disabled,$id);    echo "</td>\n";}function seat_list_cells1($label, $name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo seat_list($name, $selected_id, $submit_on_change, $disabled,$id);    echo "</td>\n";}function seat_list($name, $selected_id = null, $submit_on_change, $disabled = false,$id) {     $sql = "select fa_seat_allocation.id,fa_seat_allocation.seat_no from fa_seat_allocation join fa_seat_master on fa_seat_master.id=fa_seat_allocation.master_id where fa_seat_master.department = $id ";    return combo_input($name, $selected_id, $sql, 'id', 'seat_no', array(        'order' => 'seat_no',        'spec_option' => '--select--',        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));    }function dept_list($name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    $sql = "select fa_department_allocation.id ,fa_department_allocation.department_id from fa_department_allocation join fa_department_master on fa_department_master.id=fa_department_allocation.master_id where fa_department_master.room = $id ";    return combo_input($name, $selected_id, $sql, 'id', 'department_id', array(        'order' => 'room',        'spec_option' => '--select--',        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));    }function group_list($name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    $sql = "select id,cat_group from fa_cat_group where subcat_id = $id ";    return combo_input($name, $selected_id, $sql, 'id', 'cat_group', array(        'order' => 'cat_group',        'spec_option' => '--select--',        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));        }function floor_list($name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    $sql = "select id,room_no from fa_room_main where asset_id = $id and !inactive";    return combo_input($name, $selected_id, $sql, 'id', 'room_no', array(        'order' => 'room_no',        'spec_option' => '--select--',        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));        }function room_list_department_row($label,$name,$selected_id = null ,$submit_on_change, $disabled = false,$id) {      echo "<tr>";    echo room_list_department_cells1($label,$name, $selected_id, $submit_on_change, $disabled,$id);    echo "</tr>\n";}function room_list_department_cells1($label, $name, $selected_id = null, $submit_on_change, $disabled = false,$id) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo room_list_department($name, $selected_id, $submit_on_change, $disabled,$id);    echo "</td>\n";}function room_list_department($name, $selected_id = null, $submit_on_change, $disabled = false,$id) {   // $sql = "SELECT department_id,description FROM `fa_department_master` as master,fa_department_allocation as alloc,fa_kv_departments as department where master.id = alloc.master_id and alloc.department_id = department.id and  room = $id and !alloc.inactive";    $sql = "SELECT alloc.id,alloc.department_id	 from fa_department_allocation as alloc join fa_department_master as master on master.id=alloc.master_id  where master.room = $id and !alloc.inactive";    return combo_input($name, $selected_id, $sql, 'id', 'department_id', array(        'order' => 'id',        'spec_option' => false,        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));}function grn_list_cells2($label, $name, $selected_id = null, $submit_on_change, $disabled = false) {    if ($label != null)        echo "<td>$label</td>\n";    echo "<td>";    echo grn_list2($name, $selected_id, $submit_on_change, $disabled);    echo "</td>\n";}function grn_list2($name, $selected_id = null, $submit_on_change, $disabled = false) {    ///$sql = "SELECT COALESCE(id,99) AS id, countries_name FROM ".TB_PREF."grn_items";    //display_error($sql);    $sql = "select fa_purch_order_details.order_no as id,concat('PO','-',fa_purch_order_details.order_no) as name FROM " . TB_PREF . "purch_order_details join fa_stock_master on fa_stock_master.stock_id = fa_purch_order_details.item_code left JOIN  fa_grn_serial_no  on fa_grn_serial_no.grn_batch_id = fa_purch_order_details.order_nowhere fa_stock_master.sl_no = 1  and  fa_grn_serial_no.id is not null group by fa_purch_order_details.order_no   ";    return combo_input($name, $selected_id, $sql, 'id', 'name', array(        'order' => 'name',        'spec_option' => false,        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));}function product_code($name, $selected_id = null, $submit_on_change, $disabled = false) {    ///$sql = "SELECT COALESCE(id,99) AS id, countries_name FROM ".TB_PREF."kv_countries";    //display_error($sql);        $sql = "select asset_id,code FROM " . TB_PREF . "asset_master where !inactive";    return combo_input($name, $selected_id, $sql, 'asset_id', 'code', array(        'order' => 'code',        'spec_option' => false,        //'spec_id' => -1,        'select_submit' => $submit_on_change,        'async' => true    ));}?>